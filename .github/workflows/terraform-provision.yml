name: AWS Infrastructure Management

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Choose an action (provision/destroy)'
        required: true
        default: 'provision'
        type: choice
        options:
          - provision
          - destroy
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - prod

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: "us-east-1"
  TF_VAR_environment: ${{ github.event.inputs.environment }}
  WORKING_DIR: ./terraform

jobs:
  manage-infrastructure:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    timeout-minutes: 60
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: "us-east-1"
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.5

      - name: Write SSH public key to file
        run: |
          echo '${{ secrets.SSH_PUBLIC_KEY }}' > ssh_key.pub
          echo "TF_VAR_ssh_public_key=$(cat ssh_key.pub)" >> $GITHUB_ENV
      
      - name: Terraform Init
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          terraform init \
            -backend-config="bucket=txkel-devops-assignment-7-16-01-25" \
            -backend-config="key=${{ github.event.inputs.environment }}/terraform.tfstate" \
            -backend-config="region=us-east-1"
      
      - name: Terraform Plan
        id: plan
        working-directory: ${{ env.WORKING_DIR }}
        env:
          TF_VAR_ssh_public_key: ${{ secrets.SSH_PUBLIC_KEY }}
        run: |
          if [ "${{ github.event.inputs.action }}" == "provision" ]; then
            terraform plan -out=tfplan \
              -var="environment=${{ github.event.inputs.environment }}" \
              -var="ssh_public_key=${{ secrets.SSH_PUBLIC_KEY }}"
          elif [ "${{ github.event.inputs.action }}" == "destroy" ]; then
            terraform plan -destroy -out=tfplan \
              -var="environment=${{ github.event.inputs.environment }}" \
              -var="ssh_public_key=${{ secrets.SSH_PUBLIC_KEY }}"
          fi
        continue-on-error: true
      
      - name: Terraform Apply/Destroy
        if: steps.plan.outcome == 'success'
        working-directory: ${{ env.WORKING_DIR }}
        env:
          TF_VAR_ssh_public_key: ${{ secrets.SSH_PUBLIC_KEY }}
        run: terraform apply -auto-approve tfplan